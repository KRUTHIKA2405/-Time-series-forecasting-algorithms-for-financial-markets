import React, { useEffect, useMemo, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, Legend } from "recharts";
import { Loader2, Play, LineChart as LineChartIcon, Upload, BarChart3, FlaskConical, Settings, RefreshCw } from "lucide-react";

// --- Helper: API base --------------------------------------------------------
const API_BASE = (import.meta as any).env?.VITE_API_BASE || ""; // '' means same origin (Codespaces port 8000)

async function api(path: string, opts: RequestInit = {}) {
  const res = await fetch(`${API_BASE}${path}`, {
    headers: { "Content-Type": "application/json", ...(opts.headers||{}) },
    ...opts,
  });
  if (!res.ok) {
    const t = await res.text();
    throw new Error(`HTTP ${res.status}: ${t}`);
  }
  return res.headers.get("content-type")?.includes("application/json") ? res.json() : res.text();
}

// --- Types -------------------------------------------------------------------
interface BarRow { time: string; open: number; high: number; low: number; close: number; volume?: number }

// --- Small UI atoms ----------------------------------------------------------
function SectionTitle({icon, title, subtitle}:{icon: React.ReactNode; title:string; subtitle?:string}){
  return (
    <div className="flex items-center gap-3 mb-3">
      <div className="p-2 rounded-2xl bg-gray-100 dark:bg-gray-800">{icon}</div>
      <div>
        <h2 className="text-xl font-semibold">{title}</h2>
        {subtitle && <p className="text-sm text-gray-500">{subtitle}</p>}
      </div>
    </div>
  );
}

// --- Main App ----------------------------------------------------------------
export default function Dashboard(){
  const [symbol, setSymbol] = useState("AAPL");
  const [interval, setInterval] = useState("5m");
  const [period, setPeriod] = useState("60d");
  const [bars, setBars] = useState<BarRow[]>([]);
  const [loading, setLoading] = useState(false);

  const [lookback, setLookback] = useState(128);
  const [horizon, setHorizon] = useState(1);
  const [features, setFeatures] = useState("close,volume");
  const [modelPath, setModelPath] = useState("");

  const [trainLog, setTrainLog] = useState<any>(null);
  const [forecast, setForecast] = useState<number[]|null>(null);
  const [evalMetrics, setEvalMetrics] = useState<any>(null);
  const [btMetrics, setBtMetrics] = useState<any>(null);

  // sensible defaults based on symbol
  useEffect(() => {
    if(symbol === "BTC-USD"){ setInterval("1m"); setPeriod("20d"); }
    else if(symbol === "^GSPC"){ setInterval("1d"); setPeriod("5y"); }
    else { setInterval("5m"); setPeriod("60d"); }
  }, [symbol]);

  const chartData = useMemo(() => {
    return bars.map(r => ({ time: new Date(r.time).toLocaleString(), close: r.close }));
  }, [bars]);

  async function backfillAll(){
    setLoading(true); try {
      await api("/collect/yahoo/backfill/watchlist", { method: "POST" });
    } finally { setLoading(false); }
  }

  async function backfillOne(){
    setLoading(true); try {
      await api("/collect/yahoo/backfill", { method: "POST", body: JSON.stringify({ symbol, interval, period }) });
    } finally { setLoading(false); }
  }

  async function loadBars(){
    setLoading(true); try {
      const q = new URLSearchParams({ symbol, interval, start: symbol === "^GSPC" ? "-365d" : "-14d" }).toString();
      const res = await api(`/data/bars?${q}`);
      setBars(res.data);
    } finally { setLoading(false); }
  }

  async function train(){
    setLoading(true); try {
      const body = {
        symbol, interval, lookback, horizon,
        features: features.split(",").map(s=>s.trim()).filter(Boolean),
        label_mode: "returns",
        epochs: 50, batch_size: 256
      };
      const res = await api("/train/start", { method:"POST", body: JSON.stringify(body) });
      setTrainLog(res);
      setModelPath(res.model_path);
    } finally { setLoading(false); }
  }

  async function predict(){
    if(!modelPath){ alert("Train first or set model path."); return; }
    setLoading(true); try {
      const body = { symbol, interval, model_path: modelPath, lookback, features: features.split(",") };
      const res = await api("/predict/next", { method:"POST", body: JSON.stringify(body) });
      setForecast(res.forecast);
    } finally { setLoading(false); }
  }

  async function evaluate(){
    if(!modelPath){ alert("Train first or set model path."); return; }
    setLoading(true); try {
      const body = { symbol, interval, model_path: modelPath, lookback, horizon, features: features.split(","), label_mode:"returns" };
      const res = await api("/metrics/evaluate", { method:"POST", body: JSON.stringify(body) });
      setEvalMetrics(res);
    } finally { setLoading(false); }
  }

  async function backtest(){
    if(!modelPath){ alert("Train first or set model path."); return; }
    setLoading(true); try {
      const body = { symbol, interval, model_path: modelPath, lookback, horizon, features: features.split(","), label_mode:"returns", threshold: 0.0, cost_bps: 1.0 };
      const res = await api("/metrics/backtest", { method:"POST", body: JSON.stringify(body) });
      setBtMetrics(res);
    } finally { setLoading(false); }
  }

  return (
    <div className="min-h-screen p-6 md:p-10 bg-white dark:bg-black text-gray-900 dark:text-gray-100">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl md:text-3xl font-bold tracking-tight flex items-center gap-3">
          <LineChartIcon className="w-7 h-7" /> Time Series Forecasting Dashboard
        </h1>
        <Button variant="secondary" onClick={loadBars}><RefreshCw className="w-4 h-4 mr-2"/>Refresh Bars</Button>
      </div>

      <Tabs defaultValue="data" className="space-y-6">
        <TabsList className="grid grid-cols-4 md:grid-cols-6 w-full md:w-[720px]">
          <TabsTrigger value="collect">Collect</TabsTrigger>
          <TabsTrigger value="data">Data</TabsTrigger>
          <TabsTrigger value="train">Train</TabsTrigger>
          <TabsTrigger value="predict">Predict</TabsTrigger>
          <TabsTrigger value="evaluate">Evaluate</TabsTrigger>
          <TabsTrigger value="backtest">Backtest</TabsTrigger>
        </TabsList>

        {/* Collect */}
        <TabsContent value="collect">
          <Card className="rounded-2xl shadow-sm">
            <CardContent className="p-6 space-y-5">
              <SectionTitle icon={<Upload className="w-5 h-5"/>} title="Backfill from Yahoo" subtitle="Use your predefined watchlist or a single symbol"/>

              <div className="grid md:grid-cols-3 gap-3">
                <div>
                  <label className="text-sm text-gray-500">Symbol</label>
                  <Select value={symbol} onValueChange={setSymbol}>
                    <SelectTrigger className="w-full mt-1"><SelectValue placeholder="Symbol"/></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="AAPL">AAPL</SelectItem>
                      <SelectItem value="MSFT">MSFT</SelectItem>
                      <SelectItem value="^GSPC">^GSPC</SelectItem>
                      <SelectItem value="BTC-USD">BTC-USD</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="text-sm text-gray-500">Interval</label>
                  <Select value={interval} onValueChange={setInterval}>
                    <SelectTrigger className="w-full mt-1"><SelectValue placeholder="Interval"/></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1m">1m</SelectItem>
                      <SelectItem value="5m">5m</SelectItem>
                      <SelectItem value="1h">1h</SelectItem>
                      <SelectItem value="1d">1d</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="text-sm text-gray-500">Period</label>
                  <Input className="mt-1" value={period} onChange={e=>setPeriod(e.target.value)} placeholder="e.g., 60d, 1y, max"/>
                </div>
              </div>

              <div className="flex gap-3">
                <Button onClick={backfillAll} disabled={loading}>
                  {loading ? <Loader2 className="w-4 h-4 mr-2 animate-spin"/> : <Upload className="w-4 h-4 mr-2"/>}
                  Backfill Watchlist
                </Button>
                <Button variant="secondary" onClick={backfillOne} disabled={loading}>
                  {loading ? <Loader2 className="w-4 h-4 mr-2 animate-spin"/> : <Upload className="w-4 h-4 mr-2"/>}
                  Backfill One
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Data */}
        <TabsContent value="data">
          <Card className="rounded-2xl shadow-sm">
            <CardContent className="p-6 space-y-5">
              <SectionTitle icon={<BarChart3 className="w-5 h-5"/>} title="Bars" subtitle="Preview recent market data"/>
              <div className="grid md:grid-cols-3 gap-3">
                <div>
                  <label className="text-sm text-gray-500">Symbol</label>
                  <Select value={symbol} onValueChange={setSymbol}>
                    <SelectTrigger className="w-full mt-1"><SelectValue placeholder="Symbol"/></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="AAPL">AAPL</SelectItem>
                      <SelectItem value="MSFT">MSFT</SelectItem>
                      <SelectItem value="^GSPC">^GSPC</SelectItem>
                      <SelectItem value="BTC-USD">BTC-USD</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="text-sm text-gray-500">Interval</label>
                  <Select value={interval} onValueChange={setInterval}>
                    <SelectTrigger className="w-full mt-1"><SelectValue placeholder="Interval"/></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1m">1m</SelectItem>
                      <SelectItem value="5m">5m</SelectItem>
                      <SelectItem value="1h">1h</SelectItem>
                      <SelectItem value="1d">1d</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="flex items-end"><Button className="w-full" onClick={loadBars}><RefreshCw className="w-4 h-4 mr-2"/>Load</Button></div>
              </div>

              <div className="h-[320px] w-full">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={chartData} margin={{left:12,right:12,top:5,bottom:5}}>
                    <XAxis dataKey="time" hide/>
                    <YAxis domain={['auto','auto']} />
                    <Tooltip/>
                    <Legend/>
                    <Line type="monotone" dataKey="close" dot={false} strokeWidth={2} name={`${symbol} close`}/>
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Train */}
        <TabsContent value="train">
          <Card className="rounded-2xl shadow-sm">
            <CardContent className="p-6 space-y-5">
              <SectionTitle icon={<FlaskConical className="w-5 h-5"/>} title="Train Model" subtitle="CNN + LSTM hybrid"/>

              <div className="grid md:grid-cols-3 gap-3">
                <div>
                  <label className="text-sm text-gray-500">Lookback</label>
                  <Input type="number" className="mt-1" value={lookback} onChange={e=>setLookback(parseInt(e.target.value||"0"))}/>
                </div>
                <div>
                  <label className="text-sm text-gray-500">Horizon</label>
                  <Input type="number" className="mt-1" value={horizon} onChange={e=>setHorizon(parseInt(e.target.value||"0"))}/>
                </div>
                <div>
                  <label className="text-sm text-gray-500">Features</label>
                  <Input className="mt-1" value={features} onChange={e=>setFeatures(e.target.value)} placeholder="close,volume"/>
                </div>
              </div>

              <div className="flex gap-3">
                <Button onClick={train} disabled={loading}><Play className="w-4 h-4 mr-2"/>Train</Button>
                {trainLog && <div className="text-sm text-gray-500">Saved: <code className="px-2 py-1 bg-gray-100 dark:bg-gray-800 rounded">{trainLog.model_path}</code></div>}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Predict */}
        <TabsContent value="predict">
          <Card className="rounded-2xl shadow-sm">
            <CardContent className="p-6 space-y-5">
              <SectionTitle icon={<Settings className="w-5 h-5"/>} title="Predict Next" subtitle="Run inference with the saved model"/>
              <div className="grid md:grid-cols-3 gap-3">
                <div className="md:col-span-2">
                  <label className="text-sm text-gray-500">Model Path</label>
                  <Input className="mt-1" value={modelPath} onChange={e=>setModelPath(e.target.value)} placeholder="artifacts/AAPL_5m_cnn_lstm.keras"/>
                </div>
                <div className="flex items-end"><Button className="w-full" onClick={predict} disabled={loading}><Play className="w-4 h-4 mr-2"/>Predict</Button></div>
              </div>
              {forecast && (
                <div className="text-sm">
                  Forecast: <code className="px-2 py-1 bg-gray-100 dark:bg-gray-800 rounded">[{forecast.map(f=>f.toFixed(6)).join(", ")}]</code>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Evaluate */}
        <TabsContent value="evaluate">
          <Card className="rounded-2xl shadow-sm">
            <CardContent className="p-6 space-y-5">
              <SectionTitle icon={<LineChartIcon className="w-5 h-5"/>} title="Evaluate" subtitle="Errors on held-out test set"/>
              <div className="flex gap-3">
                <Button onClick={evaluate} disabled={loading}><Play className="w-4 h-4 mr-2"/>Run Evaluation</Button>
              </div>
              {evalMetrics && (
                <div className="grid md:grid-cols-4 gap-3 text-sm">
                  <Metric label="RMSE" value={evalMetrics.rmse}/>
                  <Metric label="MAE" value={evalMetrics.mae}/>
                  <Metric label="MAPE %" value={evalMetrics.mape}/>
                  <Metric label="Directional Acc" value={evalMetrics.directional_acc}/>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Backtest */}
        <TabsContent value="backtest">
          <Card className="rounded-2xl shadow-sm">
            <CardContent className="p-6 space-y-5">
              <SectionTitle icon={<LineChartIcon className="w-5 h-5"/>} title="Backtest" subtitle="Threshold strategy metrics"/>
              <div className="flex gap-3">
                <Button onClick={backtest} disabled={loading}><Play className="w-4 h-4 mr-2"/>Run Backtest</Button>
              </div>
              {btMetrics && (
                <div className="grid md:grid-cols-4 gap-3 text-sm">
                  <Metric label="Hit Ratio" value={btMetrics.hit_ratio}/>
                  <Metric label="Sharpe" value={btMetrics.sharpe}/>
                  <Metric label="Max Drawdown" value={btMetrics.max_drawdown}/>
                  <Metric label="Avg Ret" value={btMetrics.avg_ret}/>
                </div>
              )}
              {btMetrics?.equity_curve && (
                <div className="h-[280px] w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={btMetrics.equity_curve.map((v:number,i:number)=>({i,eq:v}))}>
                      <XAxis dataKey="i"/>
                      <YAxis domain={["auto","auto"]}/>
                      <Tooltip/>
                      <Legend/>
                      <Line type="monotone" dataKey="eq" dot={false} strokeWidth={2} name="Equity"/>
                    </LineChart>
                  </ResponsiveContainer>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

      </Tabs>

      {loading && (
        <div className="fixed bottom-4 right-4 flex items-center gap-2 text-sm bg-gray-900 text-white px-3 py-2 rounded-xl shadow-lg">
          <Loader2 className="w-4 h-4 animate-spin"/> Working...
        </div>
      )}
    </div>
  );
}

function Metric({label, value}:{label:string; value:number}){
  return (
    <div className="p-3 rounded-xl bg-gray-50 dark:bg-gray-900">
      <div className="text-xs text-gray-500 mb-1">{label}</div>
      <div className="text-lg font-semibold">{Number(value).toFixed(4)}</div>
    </div>
  );
}
